" Instalar o NeoBundle antes, seguindo os passos abaixo
" vimrc sugerido - colocar em .vim/vimrc
" colocar o vimrc no local correto o NeoBundle confirmarÃ¡ a instalaÃ§Ã£o
" dos plugins.
" A primeira vez que executar o vim depois de instalar o neobundle e

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Instalação do NeoBundle
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" $ mkdir -p ~/.vim/bundle
" $ git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible
filetype off
let mapleader = ","

" NeoBundle (plugin manager) config
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" Vimscripts {{{
source ~/.vim/bundles.vim
source ~/.vim/keymaps.vim
" }}}

call neobundle#end()
filetype plugin indent on " required
NeoBundleCheck            " Check if any bundle is not installed on startup
syntax on                 " Enable syntax recognition

"""""""""""""
" Vim options
"""""""""""""
set number          " Show line numbers
set ignorecase      " Ignore case while searching
set smartcase       " If you search with all lower case letters the search will be case insensitive.
set infercase       " If you type any upper case letter the search will be case sensitive
set hlsearch        " Highlight search term
set incsearch       " Go to the matching pattern while you type
set smartindent     " Indent really smartly
set tabstop=2       " Configure tabs to two spaces
set softtabstop=2   " Configure tabs to two spaces
set shiftwidth=2    " Configure tabs to two spaces
set shiftround      " Configure tabs to two spaces
set expandtab       " Insert white spaces when you press tab
set wildmenu        " zsh like menu
set wildmode=full   " zsh like menu
set nowrap            " Break lines wider than the window width
set nrformats=alpha " Increases/Decreases numbers with Ctrl-a/Ctrl-x correctrly
                    " Help from: http://www.slackorama.com/projects/vim/vimrc.html
set showcmd         " Show what command is being typed at the right corner
set ruler           " Show the cursor position all the time
set enc=utf-8       " UTF-8 encoding, by default
set modeline        " Load modelines when file opens, i.e.: # vim: set ts=2 :
                    " http://vim.wikia.com/wiki/Modeline_magic
set relativenumber

"infinite undos(even once closed file)"
"""""""""""""""""""""""""""""""""""""""""""""""""""
if !isdirectory('~/tmp/vim') | silent execute '!rm -f ~/tmp/vim; mkdir -p ~/tmp/vim' | endif
set directory=~/tmp/vim//
set undofile
set undolevels=1000
set undoreload=10000
set undodir=~/.vim/tmp/undo//
"""""""""""""""""""""""""""""""""""""""""""""""""""

" CSApprox, for emulating gvim colors on the terminal
"""""""""""""""""""""""""""""""""""""""""""""""""""
if !has('gui_running') && exists(':CSApprox')
 CSApprox
endif

if &term =~ '^\(xterm\|screen\)$' && $COLORTERM == 'gnome-terminal'
 set t_Co=256
endif
set t_Co=256

if &term =~ '^screen'
   " tmux will send xterm-style keys when its xterm-keys option is on
   execute "set <xUp>=\e[1;*A"
   execute "set <xDown>=\e[1;*B"
   execute "set <xRight>=\e[1;*C"
   execute "set <xLeft>=\e[1;*D"
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""

"Removing trailing whitespace
"""""""""""""""""""""""""""""""""""""""""""""""""""
augroup BeforeExit
  autocmd!
  autocmd BufWritePre * :%s/\s\+$//e "Automatically removes all trailing whitespace
augroup end
"""""""""""""""""""""""""""""""""""""""""""""""""""

runtime macros/matchit.vim " match the opening/closing html tag when pressing '%'

" Open NERDTRee while starting vim and close it when it is the last window
augroup NERDTreeCustomCommands
  autocmd!
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup end

" The Silver Searcher
if executable('ag')
 " Use ag over grep
 set grepprg=ag\ --nogroup\ --nocolor\ --smart-case  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore

 let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'  " ag is fast enough that CtrlP doesn't need to cache
 let g:ctrlp_use_caching = 0
endif

"""""""""""""
" Colorscheme
"""""""""""""
set background=dark
colorscheme jellybeans

" Set ultisnips triggers
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>""
let g:UltiSnipsListSnippets="<C-k>"

"Change default of multi_cursor
let g:multi_cursor_next_key='<C-d>'

" Vim test
let g:test#strategy = "vtr"

""""""""""""""""""""
" Custom status line
""""""""""""""""""""
set laststatus=2                                " Always show the status line
set statusline=%-40F                            " Full filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, " file encoding
set statusline+=%{&ff}]                         " file format
set statusline+=%h                              " help file flag
set statusline+=%m                              " modified flag
set statusline+=%r                              " read only flag
set statusline+=%y                              " filetype
set statusline+=%=                              " left/right separator
set statusline+=%c,                             " cursor column
set statusline+=%l/%L                           " cursor line/total lines
set statusline+=\ %P                            " percent through file

""""""""""""""""""""""""
" Loading specific files
""""""""""""""""""""""""
au BufRead,BufNewFile *.md set filetype=markdown
au FileType markdown setlocal ts=4 sts=4 sw=4

" VTR
let g:VtrInitialCommand = 'drunb'
let g:VtrOrientation = 'h'
let g:VtrPercentage = 35

" YouCompleteMe
let g:ycm_collect_identifiers_from_tags_files = 1

inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  " return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  " return pumvisible() ? neocomplete#close_popup() : "\<CR>"
  return pumvisible() ? "\<C-y> " : "\<CR>"
endfunction

let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_save = 1
let g:ale_javascript_eslint_use_global = 0

let g:syntastic_ruby_checkers = ["mri", "rubocop"]
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {
     \ "mode": "passive",
     \ "active_filetypes": [],
     \ "passive_filetypes": [] }

" Vim Debug {{{
let g:vdebug_options = {
     \ 'path_maps': {
     \ '/var/www/dc-commerce': '/home/hideki/Documents/fazen/dc-commerce/www/dc-commerce'
     \ }
     \ }
" }}}
"
" Gundo to use python 3
let g:gundo_prefer_python3 = 1

""""""""""""""""""""""""""""""""""""""""""
""vim-tmux-navigator""
let g:tmux_navigator_no_mappings = 1

map <silent> <C-Left>  :TmuxNavigateLeft<cr>
map <silent> <C-Down>  :TmuxNavigateDown<cr>
map <silent> <C-Up>    :TmuxNavigateUp<cr>
map <silent> <C-Right> :TmuxNavigateRight<cr>

""""""""""""""""""""""""""""""""""""""""""
"custom js color
highlight javascriptVariable term=bold ctermfg=103 guifg=#8197bf
highlight javascriptImport term=bold ctermfg=103 guifg=#8197bf
highlight javascriptClassSuperName term=bold ctermfg=183 guifg=#8197bf
highlight javascriptClassName term=bold ctermfg=183 guifg=#8197bf
highlight javascriptConstant term=bold ctermfg=167 guifg=#cf6a4c
highlight javascriptDebugger term=bold ctermfg=167 guifg=#cf6a4c

highlight javascriptFuncName term=bold ctermfg=255 guifg=#eeeeee
highlight javascriptMethodName term=bold ctermfg=255 guifg=#eeeeee
highlight javascriptBrackets term=bold ctermfg=255 guifg=#eeeeee
highlight javascriptBraces term=bold ctermfg=255 guifg=#eeeeee

highlight javascriptObjectLiteral term=bold ctermfg=183 guifg=#8197bf
highlight javascriptObjectLabelColon term=bold ctermfg=183 guifg=#8197bf

highlight javascriptExport term=bold ctermfg=103 guifg=#8197bf
