" vimrc sugerido - colocar em .vim/vimrc
" Instalar o NeoBundle antes, seguindo os passos abaixo
" A primeira vez que executar o vim depois de instalar o neobundle e
" colocar o vimrc no local correto o NeoBundle confirmarÃ¡ a instalaÃ§Ã£o
" dos plugins.

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Instalação do NeoBundle
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" $ mkdir -p ~/.vim/bundle
" $ git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible
filetype off
let mapleader = ","

" NeoBundle (plugin manager) config
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

""""""""""""""
" Plugins list
""""""""""""""
NeoBundle 'AndrewRadev/splitjoin.vim'
NeoBundle 'AndrewRadev/switch.vim'
NeoBundle 'breuckelen/vim-resize'
NeoBundle 'christoomey/vim-tmux-navigator'
NeoBundle 'drslump/vim-syntax-js'         "  Improves vim js syntax and indentation
NeoBundle 'gundo'                         "  Gundo - Undo, in small pieces
NeoBundle 'henrik/vim-indexed-search'
NeoBundle 'honza/vim-snippets'            "  The best snippet engine you'll ever need
NeoBundle 'jiangmiao/auto-pairs'          "  If you miss IDE features like character closing
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'kien/ctrlp.vim'                "  Fuzzyfinder, yes vim has and has more than one
NeoBundle 'nelstrom/vim-textobj-rubyblock'
NeoBundle 'othree/html5.vim'              "  Improves vim html5 syntax and indentation
NeoBundle 'scrooloose/nerdtree'           "  A file explorer
NeoBundle 'shougo/neocomplete.vim'
NeoBundle 'sirver/ultisnips'
NeoBundle 'slim-template/vim-slim'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'tomtom/tcomment_vim'           "  Comment like a boss
NeoBundle 'tpope/vim-endwise'             "  If you miss IDE features like block closing
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-rails'               "  If you use these plugins correctly you'll never
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'            "  Ease surrounding
NeoBundle 'tpope/vim-unimpaired'
NeoBundle 'tpope/vim-ragtag'
NeoBundle 'vim-ruby/vim-ruby'             "  look for an IDE again
NeoBundle 'vim-scripts/JavaScript-Indent'
NeoBundle 'christoomey/vim-tmux-runner'
NeoBundle 'janko-m/vim-test'
NeoBundle 'ekalinin/Dockerfile.vim'

NeoBundle 'bling/vim-airline'


" ColorScheme
NeoBundle 'csapprox'
NeoBundle 'nanotech/jellybeans.vim'
NeoBundle 'vim-scripts/Wombat'
NeoBundle 'vim-scripts/Railscasts-Theme-GUIand256color'
NeoBundle 'vim-scripts/wombat256.vim'
NeoBundle 'henrik/vim-qargs'
NeoBundle 'rking/ag.vim'

call neobundle#end()
filetype plugin indent on " required
NeoBundleCheck            " Check if any bundle is not installed on startup
syntax on                 " Enable syntax recognition

"""""""""""""
" Vim options
"""""""""""""
set number          " Show line numbers
set ignorecase      " Ignore case while searching
set smartcase       " If you search with all lower case letters the search will be case insensitive.
set infercase       " If you type any upper case letter the search will be case sensitive
set hlsearch        " Highlight search term
set incsearch       " Go to the matching pattern while you type
set smartindent     " Indent really smartly
set tabstop=2       " Configure tabs to two spaces
set softtabstop=2   " Configure tabs to two spaces
set shiftwidth=2    " Configure tabs to two spaces
set shiftround      " Configure tabs to two spaces
set expandtab       " Insert white spaces when you press tab
set wildmenu        " zsh like menu
set wildmode=full   " zsh like menu
set nowrap            " Break lines wider than the window width
set nrformats=alpha " Increases/Decreases numbers with Ctrl-a/Ctrl-x correctrly
                    " Help from: http://www.slackorama.com/projects/vim/vimrc.html
set showcmd         " Show what command is being typed at the right corner
set ruler           " Show the cursor position all the time
set enc=utf-8       " UTF-8 encoding, by default

if !isdirectory('~/tmp/vim') | silent execute '!rm -f ~/tmp/vim; mkdir -p ~/tmp/vim' | endif
set directory=~/tmp/vim//
set undofile
set undolevels=1000
set undoreload=10000
set undodir=~/.vim/tmp/undo//

" CSApprox, for emulating gvim colors on the terminal
if !has('gui_running') && exists(':CSApprox')
 CSApprox
endif

if &term =~ '^\(xterm\|screen\)$' && $COLORTERM == 'gnome-terminal'
 set t_Co=256
endif

if &term =~ '^screen'
   " tmux will send xterm-style keys when its xterm-keys option is on
   execute "set <xUp>=\e[1;*A"
   execute "set <xDown>=\e[1;*B"
   execute "set <xRight>=\e[1;*C"
   execute "set <xLeft>=\e[1;*D"
endif

set modeline " Load modelines when file opens, i.e.: # vim: set ts=2 :
             " http://vim.wikia.com/wiki/Modeline_magic

augroup BeforeExit
  autocmd!
  autocmd BufWritePre * :%s/\s\+$//e "Automatically removes all trailing whitespace
augroup end

runtime macros/matchit.vim " match the opening/closing html tag when pressing '%'

" Open NERDTRee while starting vim and close it when it is the last window
augroup NERDTreeCustomCommands
  autocmd!
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
augroup end

" The Silver Searcher
if executable('ag')
 " Use ag over grep
 set grepprg=ag\ --nogroup\ --nocolor\ --smart-case  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore

 let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'  " ag is fast enough that CtrlP doesn't need to cache
 let g:ctrlp_use_caching = 0
endif

"""""""""""""
" Colorscheme
"""""""""""""
set background=dark
colorscheme jellybeans

""""""""""""""""
" Custom keymaps
""""""""""""""""
" Toggle NERDTree
nnoremap <C-n> :NERDTreeToggle<CR>

" Ctrl-t opens the TaskList inside a file
map <C-t> <Plug>TaskList

" Ctrl-g opens Gundo
map <C-g> :GundoToggle<CR>

" Map jk to always advance a screen line
nnoremap j gj
nnoremap k gk

inoremap jk <esc>
" ,c toggles comment (Tcomment)
nmap <silent> <leader>c :TComment<CR>
vmap <silent> <leader>c :TComment<CR>

" Move lines or chunks of lines up and down
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e

" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Ctrl J/K add blank lines above and below
nnoremap <C-J> m`o<Esc>``
nnoremap <C-K> m`O<Esc>``

"Make arrows to do nothing
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>

nnoremap <C-b> :e#<CR>

nnoremap <leader>s :w<CR>
inoremap <leader>s <Esc> :w<CR>

nnoremap <leader>q :q<CR>
inoremap <leader>q <Esc> :q<CR>

nnoremap <leader>h :set hlsearch!<CR>

nnoremap Q @q
vnoremap Q :normal @q<cr>

imap ,/ </<C-X><C-O>

" Run tests from Vim
noremap <silent> <leader>tn :TestNearest<CR>
noremap <silent> <leader>tf :TestFile<CR>
noremap <silent> <leader>ta :TestSuite<CR>
noremap <silent> <leader>tl :TestLast<CR>
noremap <silent> <leader>tg :TestVisit<CR>

" Buffer
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

" Allows to change to buffers using leader + number
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" Set ultisnips triggers
let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>""
let g:UltiSnipsListSnippets="<C-k>"

"Change default of multi_cursor
let g:multi_cursor_next_key='<C-d>'

" Vim test
let g:test#strategy = "vtr"


""""""""""""""""""""
" Custom status line
""""""""""""""""""""
set laststatus=2                                " Always show the status line
set statusline=%-40F                            " Full filename
set statusline+=[%{strlen(&fenc)?&fenc:'none'}, " file encoding
set statusline+=%{&ff}]                         " file format
set statusline+=%h                              " help file flag
set statusline+=%m                              " modified flag
set statusline+=%r                              " read only flag
set statusline+=%y                              " filetype
set statusline+=%=                              " left/right separator
set statusline+=%c,                             " cursor column
set statusline+=%l/%L                           " cursor line/total lines
set statusline+=\ %P                            " percent through file

""""""""""""""""""""""""
" Loading specific files
""""""""""""""""""""""""
au BufRead,BufNewFile *.md set filetype=markdown
au FileType markdown setlocal ts=4 sts=4 sw=4

""""""""
" Dica "
""""""""
" Como ver quais sÃ£o as teclas mapeadas no vim:
" :nmap for normal mode mappings
" :vmap for visual mode mappings
" :imap for insert mode mappings
" :mkexrc Write current key mappings and changed options to [file]

" VTR
let g:VtrInitialCommand = 'drunb'
let g:VtrOrientation = 'h'
let g:VtrPercentage = 35
